openapi: '3.0.0'
info:
  version: '0.0.1'
  title: 'Moreno Models'
  description: 'Manage your models, works and photos.'

paths:
  /photos:
    get:
      operationId: listPhotos
      summary: List all photos
      parameters:
        - name: nextToken
          description: Pagination token to get the next page. It's received in the response when there are more pages.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PaginationToken'
        - name: pageSize
          description: Number of models to return on each call.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: showArchived
          description: Whether to show archived photos.
          in: query
          required: false
          schema:
            type: boolean
        - name: modelSlug
          description: Filter by a model.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Slug'
      responses:
        200:
          description: A list of photos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photos'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
    post:
      operationId: createPhoto
      summary: Creates a photo disassociated with any entity and returns upload URL.
      requestBody:
        description: Create a new photo.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPhoto'
      responses:
        200:
          description: A created photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedPhoto'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
  /photos/{photoSlug}:
    parameters:
      - name: photoSlug
        description: Human readable unique identifier of a model.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Slug'
    get:
      operationId: getPhoto
      summary: Gets a single photo details
      responses:
        200:
          description: Get a photo details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        404:
          description: Photo for the provided slug was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: archivePhoto
      summary: Marks photo as archived or completely deletes it from the application
      parameters:
        - name: delete
          description: If set to true, deletes photo from the database and the underlying storage.
          in: query
          schema:
            type: boolean
      responses:
        201:
          description: Confirmation that the photo was properly archived.
        404:
          description: Photo for the provided slug was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /photos/{photoSlug}/upload:
    parameters:
      - name: photoSlug
        description: Human readable unique identifier of a model.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Slug'
    put:
      operationId: uploadPhoto
      summary: Upload/replace a photo's contents and place in the durable storage
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpg:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Confirmation that the photo was properly uploaded with it's dimension and storage URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        404:
          description: No model found for the provided `photoSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Someone updated the photos's data in the meantime and there is a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
  /models:
    get:
      operationId: listModels
      summary: List models
      parameters:
      - name: nextToken
        description: Pagination token to get the next page. It's received in the response when there are more pages.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: pageSize
        description: Number of models to return on each call.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
      - name: showArchived
        description: Whether to show archived photos.
        in: query
        required: false
        schema:
          type: boolean
      - name: givenName
        description: Filter by givenName in LIKE manner.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GivenName'
      responses:
        200:
          description: The model list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
    post:
      operationId: createModel
      summary: Create a new model
      requestBody:
        description: Create a new model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewModel'
      responses:
        200:
          description: The created model's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
  /models/{modelSlug}:
    parameters:
      - name: modelSlug
        description: Human readable unique identifier of a model.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Slug'
    get:
      operationId: getModel
      summary: Get a model's personal details
      responses:
        200:
          description: The model's personal data corresponding to the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        404:
          description: No model found for the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
    delete:
      operationId: archiveModel
      summary: Marks model as archived or completely deletes it from the application
      parameters:
        - name: delete
          description: If set to true, deletes photo from the database and the underlying storage.
          in: query
          schema:
            type: boolean
      responses:
        201:
          description: Confirmation that the model was properly archived.
        404:
          description: Model for the provided slug was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateModel
      summary: Update a model's personal details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatableModel'
      responses:
        200:
          description: The model's update personal data corresponding to the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        404:
          description: No model found for the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Someone updated the model's data in the meantime and there is a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:MorenoModelsHandler/invocations'
        httpMethod: "POST"
        type: "aws_proxy"
components:
  schemas:
    Id:
      description: The generic unique identifier.
      type: string
      maxLength: 128
    Version:
      description: Version number, used for optimistic locking.
      type: integer
      minimum: 0
    PaginationToken:
      description: Pagination token to get the next page.
      type: string
      maxLength: 512
    PageSize:
      description: Size of the page, number of resources to return.
      type: integer
      minimum: 1
      maximum: 1000
    DateTime:
      description: DateTime with Time zone specified, according to RFC 3339, section 5.6
      type: string
      format: 'date-time'
    URI:
      description: The uri of a resource.
      type: string
    Slug:
      description: Human readable identifier.
      type: string
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      minLength: 1
      maxLength: 100
    EyeColor:
      type: string
      enum:
        - blue
        - green
        - brown
        - gray
        - unique
    Height:
      description: 'Height in centimeters.'
      type: integer
      minimum: 100
      maximum: 220
    GivenName:
      description: 'Given name, e.g. Konrad'
      type: string
      maxLength: 64
    FamilyName:
      description: 'Family name, e.g. Smith'
      type: string
      maxLength: 64
    NewModel:
      type: object
      required:
        - modelSlug
        - givenName
        - familyName
      properties:
        modelSlug:
          $ref: '#/components/schemas/Slug'
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        eyeColor:
          $ref: '#/components/schemas/EyeColor'
        height:
          $ref: '#/components/schemas/Height'
    UpdatableModel:
      type: object
      required:
        - version
      properties:
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        eyeColor:
          $ref: '#/components/schemas/EyeColor'
        height:
          $ref: '#/components/schemas/Height'
        archived:
          type: boolean
          description: 'Tells whether the model were archived (its contents are still on disk).'
        version:
          $ref: '#/components/schemas/Version'
    Model:
      type: object
      required:
        - modelId
        - modelSlug 
        - givenName
        - familyName
        - created
        - version
        - archived
      properties:
        modelId:
          $ref: '#/components/schemas/Id'
        modelSlug:
          $ref: '#/components/schemas/Slug'
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        eyeColor:
          $ref: '#/components/schemas/EyeColor'
        height:
          $ref: '#/components/schemas/Height'
        archived:
          type: boolean
          description: 'Tells whether the model were archived (its contents are still on disk).'
        created:
          $ref: '#/components/schemas/DateTime'
        updated:
          $ref: '#/components/schemas/DateTime'
        version:
          $ref: '#/components/schemas/Version'
    NewPhoto:
      type: object
      required:
        - photoSlug
      properties:
        photoSlug:
          $ref: '#/components/schemas/Slug'
        modelSlug:
          $ref: '#/components/schemas/Slug'
    CreatedPhoto:
      type: object
      required:
        - photoId
        - photoSlug
        - uploadUri
      properties:
        photoId: 
          $ref: '#/components/schemas/Id'
        photoSlug:
          $ref: '#/components/schemas/Slug'
        uploadUri: 
          $ref: '#/components/schemas/URI'
    Photo:
      type: object
      required:
        - photoSlug
        - uri
        - photoId
        - version
        - archived
      properties:
        photoId:
          $ref: '#/components/schemas/Id'
        photoSlug:
          $ref: '#/components/schemas/Slug'
        uri: 
          $ref: '#/components/schemas/URI'
        width:
          type: integer
          description: 'Width of the photo in pixels.'
          minimum: 1
          maximum: 30000
        height:
          type: integer
          description: 'Height of the photo in pixels.'
          minimum: 1
          maximum: 30000
        modelSlug:
          $ref: '#/components/schemas/Slug'
        archived:
          type: boolean
          description: 'Tells whether the photo was archived (its contents are still on disk).'
        created:
          $ref: '#/components/schemas/DateTime'
        updated:
          $ref: '#/components/schemas/DateTime'
        version:
          $ref: '#/components/schemas/Version'
    PaginationMetadata:
      type: object
      properties:
        nextToken:
          $ref: '#/components/schemas/PaginationToken'
    Error:
      type: object
      properties:
        message:
          description: A human readable error message.
          type: string
    Models:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          $ref: '#/components/schemas/PaginationMetadata'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Model'
    Photos:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          $ref: '#/components/schemas/PaginationMetadata'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://morenomodels.stepniak.net/oauth2/authorize'
          tokenUrl: 'https://i-dont-know-yet'
          scopes:
            'write:models': write models
            'list:models': list models
security:
  - OAuth2: []