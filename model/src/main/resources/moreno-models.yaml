openapi: '3.0.0'
info:
  version: '0.0.1'
  title: 'Moreno Models'
  description: 'Manage your models, works and photos.'

paths:
  /photos:
    get:
      operationId: listPhotos
      summary: List all photos
      parameters:
        - name: nextToken
          description: Pagination token to get the next page. It's received in the response when there are more pages.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PaginationToken'
        - name: pageSize
          description: Number of models to return on each call.
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        200:
          description: A list of photos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photos'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /photos/{photoSlug}/upload:
    parameters:
      - name: photoSlug
        description: Human readable unique identifier of a model.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Slug'
    put:
      operationId: uploadPhoto
      summary: Upload/replace a photo's contents and place in the durable storage
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: Confirmation that the photo was properly uploaded with it's dimension and storage URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        404:
          description: No model found for the provided `photoSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Someone updated the photos's data in the meantime and there is a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models:
    get:
      operationId: listModels
      summary: List models
      parameters:
      - name: nextToken
        description: Pagination token to get the next page. It's received in the response when there are more pages.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: pageSize
        description: Number of models to return on each call.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
      responses:
        200:
          description: The model list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Models'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createModel
      summary: Create a new model
      requestBody:
        description: Create a new model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        200:
          description: The created model's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{modelSlug}:
    parameters:
      - name: modelSlug
        description: Human readable unique identifier of a model.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Slug'
    get:
      operationId: getModel
      summary: Get a model's personal details
      responses:
        200:
          description: The model's personal data corresponding to the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        404:
          description: No model found for the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateModel
      summary: Update a model's personal details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        200:
          description: The model's update personal data corresponding to the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        404:
          description: No model found for the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: Someone updated the model's data in the meantime and there is a conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /models/{modelSlug}/photos:
    parameters:
      - name: modelSlug
        description: Unique model identifier.
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Slug'
      - name: nextToken
        description: Pagination token to get the next page. It's received in the response when there are more pages.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: pageSize
        description: Number of photos to return on each call.
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageSize'
    post:
      operationId: createModelPhoto
      summary: Creates a new model photo and returns the URL where to upload it
      requestBody:
        description: Create a new model's photo.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
      responses:
        200:
          description: A photo with an target URL where to upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPhoto'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    get:
      operationId: listModelPhotos
      summary: List a model's photos
      responses:
        200:
          description: List a model's photos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelPhotos'
        404:
          description: No photos found for the provided `modelSlug`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Id:
      description: The generic unique identifier.
      type: string
      maxLength: 128
    Version:
      description: Version number, used for optimistic locking.
      type: integer
      minimum: 0
    PaginationToken:
      description: Pagination token to get the next page.
      type: string
      maxLength: 512
    PageSize:
      description: Size of the page, number of resources to return.
      type: integer
      minimum: 1
      maximum: 1000
    URI:
      description: The uri of a resource.
      type: string
    Slug:
      description: Human readable identifier.
      type: string
      pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$'
      maxLength: 100
    Model:
      type: object
      required:
        - modelSlug 
        - givenName
        - familyName
      properties:
        modelId:
          $ref: '#/components/schemas/Id'
        modelSlug:
          $ref: '#/components/schemas/Slug'
        givenName:
          type: string
          maxLength: 64
        familyName:
          type: string
          maxLength: 64
        eyeColor:
          type: string
          enum:
            - blue
            - green
            - brown
            - gray
            - unique
        height:
          description: 'Height in centimeters.'
          type: integer
          minimum: 140
          maximum: 220
        version:
          $ref: '#/components/schemas/Version'
    NewPhoto:
      type: object
      properties:
        photoId: 
          $ref: '#/components/schemas/Id'
        uploadUri: 
          $ref: '#/components/schemas/URI'
    Photo:
      type: object
      required:
        - photoSlug
      properties:
        photoId:
          $ref: '#/components/schemas/Id'
        photoSlug:
          $ref: '#/components/schemas/Slug'
        uri: 
          $ref: '#/components/schemas/URI'
        width:
          type: integer
          description: 'Width of the photo in pixels.'
          minimum: 1
          maximum: 30000
        height:
          type: integer
          description: 'Height of the photo in pixels.'
          minimum: 1
          maximum: 30000
        version:
          $ref: '#/components/schemas/Version'
    PaginationMetadata:
      type: object
      properties:
        nextToken:
          $ref: '#/components/schemas/PaginationToken'
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message.
          type: string
    Models:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/PaginationMetadata'
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
    Photos:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/PaginationMetadata'
        models:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
    ModelPhotos:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/PaginationMetadata'
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://morenomodels.stepniak.net/oauth2/authorize'
          tokenUrl: 'https://i-dont-know-yet'
          scopes:
            'write:models': write models
            'list:models': list models
security:
  - OAuth2: []